def func1(arg1, arg2):
    var3 = func4()
    if arg1 < var3:
        var8 = class5()
    else:
        var8 = class7()
    for var9 in ((arg1 & var3) & arg2 for i in range(45)):
        var10 = var8.func6
        var10(var9, var9)
    var15 = func9(arg1, arg2)
    var45 = var18(var3, arg1)
    var46 = var3 & var15 | var15
    var47 = 742 + (812 - var45) + (((1529340537 - var45 | var15 + var46) + 2002255567 - arg1) - 501 | 161445499 & ((arg2 + -635) ^ var45)) + ((arg2 | var3) & (var46 - var3) - 240)
    var48 = var46 + (((var45 & var46) | (arg2 ^ arg1)) - (114657690 & var47) - var3) - ((var46 - var46 & arg2 & ((arg1 + ((68 | 420) | var45 + var47)) ^ -548 + var3 & var45) ^ var46 | arg1) + var47)
    var49 = ((var47 ^ arg2) + ((((((var45 + ((960 ^ 218) - (var3 ^ var15 + var46))) + arg2) - var48) & var47) - -813405502) & (var47 | 1759479521))) ^ var47
    result = -900 & (var49 | var47)
    return result
def func12(arg19, arg20):
    var21 = 406 & arg20
    var22 = 839 | 118 - var21 & -1521283050
    var23 = (362 + arg19) ^ var22 - arg19
    var24 = var21 ^ var23
    var25 = arg20 - var22 & var23 - 584
    var26 = (-1957464892 | var23 & var22) - -714
    var27 = ((var25 - arg20) ^ var26) + -477
    var28 = var25 ^ (var22 ^ -2115523185)
    var29 = 868 + (var25 | -652)
    var30 = arg19 | var26
    var31 = -784 & -767
    var32 = var25 + var22 | var27 - arg20
    if var30 < var30:
        var33 = var21 + var27
    else:
        var33 = var21 - (var32 & var25) - arg20
    var34 = 802923877 & 346
    var35 = var28 ^ var26 + arg19
    var36 = var26 - (var23 & (var21 - var24))
    var37 = var29 ^ var21
    var38 = var24 - (var31 ^ var34) + var22
    var39 = var27 | var34
    var40 = var26 & var22
    var41 = (var21 + var32 ^ var35) & var22
    var42 = var24 + arg20 ^ var41
    var43 = var26 - var31
    var44 = (var26 - arg19) | var39 | -657659662
    result = var41 & arg19 + var24 | var27
    return result
def func11():
    closure = [-1]
    def func10(arg16, arg17):
        closure[0] += func12(arg16, arg17)
        return closure[0]
    func = func10
    return func
var18 = func11()
def func9(arg11, arg12):
    var13 = 0
    for var14 in range(22):
        var13 += (arg11 + var14) | var14
    return var13
class class7(object):
    def func6(self, arg6, arg7):
        return 0
class class5(object):
    def func6(self, arg4, arg5):
        return 0
def func4():
    func2()
    result = len(range(36))
    func3()
    return result
def func3():
    global len
    del len
def func2():
    global len
    len = lambda x : -3
if __name__ == "__main__":
    print 'prog_size: 5'
    print 'func_number: 13'
    print 'arg_number: 50'
    for i in xrange(25000):
        x = 5
        x = func1(x, i)
        print x,
